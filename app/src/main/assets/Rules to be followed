#######          Caution          ########

In this project I am trying to create a bridge between Android Framework and the WebView Interaction using the JavaScript. As android supports the JavaScript interfaces to communicate complex logic and interaction with WebView and Native part. So that I used it as a bridge to interact SVG image controlling the selection of their internal paths. As I do not know much about Js I have tried in a manual way.

Well, here is some rules I set for my initial setup for this project :-

1. It is important to make a feature dynamic; so that, I download the svg from the 'url' and read the svg file from the native part. So that, to keep this dynamic, it is important to keep the SVG format in a same way. So that the same Js code will work for all SVGs.
2. Paths are the main responsible for the interaction process so to find out the import paths we're looking forward to be interacted. To do so, we need to isolate those paths by giving them a common identification. In this current project I have renamed the 'path id' with a prefix "Code_" i.e: '*[id^="Code_"]' - so that We can easily find out the only interactive paths and make them intractable or selectable.
3. Some custom setup with style can be made for the flexibility of uses upon the interaction process. As I used some custom style to the HTML body to the SVG file we are intend to load into it. This will help us to set the "default" theme or what will be the state and actions after interaction to any of these paths into the current SVG file.
4. Another important thing is, how will we communicate after all?! Well, this is a very good question. We will be communicating using 'callbacks' AKA 'interfaces'. So, here is the most important rule! "Always keep both of the interface methods names same in both end [Native code and Js code]". Like, say I have a method which will return the state name from the US map SVG file after selecting one, we need to make sure that the communicator's methods names and the implemented method's name must be the same.
5. Last but not the least, never forget to inject the implemented js functions of the js interfaces just before loading the HTML file into the WebView on the native side. At the end of the implementation we need to (must) remove the created callbacks to avoid the memory leaks and garbage values and avoid unusual crashes.


That's it! We're ready to go...